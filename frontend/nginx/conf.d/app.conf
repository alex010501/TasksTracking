# HTTP -> HTTPS
server {
  listen 80;
  listen [::]:80;
  server_name xn----dtbfcbabfwu3ac9c2ba.xn--p1ai www.xn----dtbfcbabfwu3ac9c2ba.xn--p1ai;
  return 301 https://$host$request_uri;
}

# HTTPS (без http2/stapling, чтобы избежать несовместимостей)
server {
  listen 443 ssl;
  listen [::]:443 ssl;
  server_name xn----dtbfcbabfwu3ac9c2ba.xn--p1ai www.xn----dtbfcbabfwu3ac9c2ba.xn--p1ai;

  ssl_certificate     /etc/ssl/xn----dtbfcbabfwu3ac9c2ba.fullchain.pem;
  ssl_certificate_key /etc/ssl/xn----dtbfcbabfwu3ac9c2ba.key;

  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers on;
  ssl_session_cache   shared:SSL:10m;
  ssl_session_timeout 10m;
  keepalive_timeout   70;

  root /usr/share/nginx/html;
  index index.html;

  location /api/ {
    proxy_pass         http://backend:8000/;

    proxy_http_version 1.1;
    proxy_set_header   Host $host;

    # критично для корректных абсолютных URL в редиректах
    proxy_set_header   X-Forwarded-Proto https;
    proxy_set_header   X-Forwarded-Host  $host;
    proxy_set_header   X-Forwarded-Port  443;

    proxy_set_header   X-Real-IP         $remote_addr;
    proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Prefix /api;

    proxy_set_header   Upgrade $http_upgrade;
    proxy_set_header   Connection "upgrade";

    proxy_read_timeout 300s;

    # подстраховка на случай, если бэк всё же вернёт абсолютный http Location
    proxy_redirect     http:// $scheme://;
  }

  location / {
    try_files $uri $uri/ /index.html;
  }

  client_max_body_size 25m;
}