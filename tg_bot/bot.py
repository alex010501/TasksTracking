import asyncio
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, Router
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, BotCommand
from api_client import (
    get_all_employees,
    get_employee,
    get_employee_rating,
    get_employee_tasks,
    get_current_week_dates,
    get_current_year_month,
)
from typing import Any, Mapping

ALLOWED_STATUSES = {"–≤ —Ä–∞–±–æ—Ç–µ", "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"}

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN", "_")

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
router = Router()

def field(obj, key, default=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ—Å—Ç–∞—ë–º –ø–æ–ª–µ –∫–∞–∫ –∏–∑ dict, —Ç–∞–∫ –∏ –∏–∑ ORM-–æ–±—ä–µ–∫—Ç–∞."""
    if isinstance(obj, dict):
        return obj.get(key, default)
    return getattr(obj, key, default)

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", callback_data="show_employees")]
        ]
    )
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=keyboard)

@router.callback_query(lambda c: c.data == "show_employees")
async def handle_employees_button(callback: CallbackQuery):
    await list_employees(callback.message)

@router.message(Command("employees"))
async def list_employees(message: types.Message):
    employees = get_all_employees()
    if not employees:
        await message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=emp["name"], callback_data=f"emp_{emp['id']}")]
            for emp in employees
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=keyboard)

@router.callback_query(lambda c: c.data.startswith("emp_"))
async def show_employee_info(callback: CallbackQuery):
    emp_id = int(callback.data.split("_")[1])
    emp = get_employee(emp_id)
    if not emp:
        await callback.message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    year, month = get_current_year_month()
    from_date = f"{year}-{month:02d}-01"
    to_date = f"{year}-{month:02d}-31"

    score_data = get_employee_rating(emp_id, from_date, to_date) or {}
    score = score_data.get("score", "‚Äî")

    start_week, end_week = get_current_week_dates()
    tasks = get_employee_tasks(emp_id, start_week, end_week) or []

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ "–≤ —Ä–∞–±–æ—Ç–µ" –∏ "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
    tasks = [t for t in tasks if field(t, "status") in ALLOWED_STATUSES]

    months = [
        "", "—è–Ω–≤–∞—Ä—å", "—Ñ–µ–≤—Ä–∞–ª—å", "–º–∞—Ä—Ç", "–∞–ø—Ä–µ–ª—å", "–º–∞–π", "–∏—é–Ω—å",
        "–∏—é–ª—å", "–∞–≤–≥—É—Å—Ç", "—Å–µ–Ω—Ç—è–±—Ä—å", "–æ–∫—Ç—è–±—Ä—å", "–Ω–æ—è–±—Ä—å", "–¥–µ–∫–∞–±—Ä—å"
    ]
    month_name = months[month]

    text = (
        f"<b>üë§ {field(emp,'name','‚Äî')}</b>\n"
        f"<b>üìå –î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {field(emp,'position','‚Äî')}\n"
        f"<b>üìä –°—Ç–∞—Ç—É—Å:</b> {field(emp,'status','‚Äî')}\n"
        f"<b>üèÜ –ë–∞–ª–ª—ã –∑–∞ {month_name} {year}:</b> <b>{score}</b>\n\n"
        f"<b>üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é:</b>\n"
    )

    if tasks:
        for t in tasks:
            text += (
                f"\n<b>‚Ä¢ {field(t,'name','‚Äî')}</b>\n"
                f"üóìÔ∏è –î–µ–¥–ª–∞–π–Ω: {field(t,'deadline','‚Äî')}\n"
                f"üìà –°–ª–æ–∂–Ω–æ—Å—Ç—å: {field(t,'difficulty','‚Äî')}\n"
                f"üìç –°—Ç–∞—Ç—É—Å: <i>{field(t,'status','‚Äî')}</i>\n"
                f"üìù {field(t,'description','‚Äî')}\n"
            )
    else:
        text += "‚Äî –∑–∞–¥–∞—á –Ω–µ—Ç"

    await callback.message.edit_text(text)

async def main():
    dp.include_router(router)

    await bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command="employees", description="–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"),
    ])

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
